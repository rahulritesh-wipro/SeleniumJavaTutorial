Object Class 
For writing any java program whether it is simple or complex, the most commonly used classes and Interfaces are defined in a separate package called java. Lang package. There is no need to import this package explicitly because by default it is available to every java program. 

Directly OR Indirectly every Class in a Java is the Child Class of the Object Class, hence as per the inheritance rule Object Class Methods are by Default Available to Every Java Class.

Object class is also known as Root for all the java classes.

If our Class is not  extending any Other Class then Only it is the Direct Child Class of Object. If our Class is  extending any Other Class then it is Indirect Child Class of Object i.e. multilevel inheritance. Here multiple inheritance with classes is not possible.


Methods:
1) public String toString()
2) public int hashCode()
3) public boolean equals(Object obj)
4) protected Object clone() throws CloneNotSupportedException
5) protected void finalize() throws Throwable
6) public final Class getClass()
7) public final void wait() throws InterruptedException
8) public final void wait(long ms) throws InterruptedException
9) public final void wait(long ms, int ns) throws InterruptedException
10) public final void notify()
11) public final void notifyAll()


The toString():
 We can Use toString() to get String Representation of an Object.
 Whenever we are trying to Print any Object Reference Internally toString() will be Called.

Student s = new Student();
System.out.println(s);
System.out.println(s.toString());

class Student {
String name;
int rollno;
Student(String name, int rollno) {
this.name = name;
this.rollno = rollno;
}
public static void main(String arg[]) {
Student s1 = new Student ("Durga", 101);
Student s2 = new Student ("Ravi", 102);
System.out.println(s1);
System.out.println(s2);
System.out.println(s1.toString());
}
}

output:-
Student@1cb25f1
Student@2808b3
Student@1cb25f1

Here in this example the Object class toString() method will be executed which is implemented as below
public String toString() {
return getClass().getName() + “@” + Integer.toHexString(hashCode());
}
i.e. ClassName@Hexa_Decimal_String_of_hashcode

To Provide Our Own String Representation we have to Override toString().
 For Example whenever we are trying to Print Student Reference to Print his Name and RollNo we can Override toString() as follows.

public String toString() {
return name+"...."+rollno;
return name;
return "This is A Student with the Name: " +name+ " and rollno: "+rollno;
}


Note - In All Wrapper Classes, in All Collection Classes, in StringBuffer, StringBuilder toString() is Overridden for Meaningful String Representation.
 It is Highly Recommended to Override toString() in our Classes Also.

import java.util.*;
class Test {
public String toString() {
return "Test";
}
public static void main(String[] args) {
String s = new String("Durga");
Integer i = new Integer(10);
ArrayList l = new ArrayList();
l.add("A");
l.add("B");
HashMap m = new HashMap();
m.put("A", 101);
Test t = new Test();
System.out.println(s); //Durga
System.out.println(i); //10
System.out.println(l); //[A, B]
System.out.println(m); //{A=101}
System.out.println(t); //Test

}
}


The hashCode():


































































