Exception Handling Concepts

What is an Exception
An Exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions 
Any issue which makes your test case stop in between the execution is an Exception.

Difference between Error and Exception
An Error "indicates serious problems that a reasonable application should not try to catch." i.e. we must fix the errors
An Exception "indicates conditions that a reasonable application might want to catch."

In programming, both errors and exceptions refer to issues that arise during the execution of a program, but they have different meanings and implications. Here's a breakdown of the differences between the two:
Error:
Definition: An error is a serious problem that a reasonable application should not try to catch. It typically indicates a flaw in the program or the environment in which it runs.
Nature: Errors are usually related to system-level issues, such as memory leaks, resource exhaustion, or other critical failures that cannot be anticipated or recovered from.


Examples: Common examples of errors include: ----------------
Out of memory errors
Stack overflow errors
Linkage errors

Handling: 
Errors are generally not meant to be handled by the application. When an error occurs, the program may terminate or crash.

Type: 
In many programming languages, errors are often represented as subclasses of a general Error class.

Exception: -------------------
Definition: 
An exception is an event that occurs during the execution of a program that disrupts the normal flow of instructions. 
Exceptions can often be anticipated and handled gracefully.
Nature: Exceptions are typically related to application-level issues, such as invalid user input, file not found errors, or network timeouts.

Examples: Common examples of exceptions include:
Null pointer exceptions
Index out of bounds exceptions
IOException (for file handling)

Handling: 
Exceptions can be caught and handled using try-catch blocks. 
This allows the program to recover from the exception and continue executing.

Type: In many programming languages, exceptions are represented as subclasses of a general Exception class,
and they can be categorized into checked and unchecked exceptions.

Summary:
Errors are usually severe issues that indicate problems with the runtime environment or the program itself and are not meant to be handled.
Exceptions are conditions that can be anticipated and handled by the program to maintain normal execution flow.
Understanding the distinction between errors and exceptions is crucial for effective error handling and debugging in software development.



##################################################################################################################################################################################

The term "reasonable application" in the context of errors and exceptions refers to a software application that is designed to operate within expected parameters and handle typical operational scenarios. Here’s a more detailed explanation:

Characteristics of a Reasonable Application:
Robustness: A reasonable application is built to handle various inputs and conditions gracefully. It anticipates potential issues (like user errors or resource unavailability) and includes mechanisms to manage them.

Error Handling: Such applications implement proper error handling for exceptions. This means they use try-catch blocks or similar constructs to catch exceptions and take appropriate actions, such as logging the error, notifying the user, or attempting recovery.

User -Centric Design: A reasonable application focuses on user experience, ensuring that it provides meaningful feedback when something goes wrong. Instead of crashing, it might display an error message or guide the user on how to correct their input.

Testing and Validation: Reasonable applications undergo thorough testing to identify and mitigate potential issues. This includes unit tests, integration tests, and user acceptance tests to ensure that the application behaves as expected under various conditions.

Graceful Degradation: In cases where certain features fail, a reasonable application may still function in a limited capacity rather than failing completely. For example, if a network resource is unavailable, the application might allow the user to work offline.

Why Errors Are Not Handled:
When we say that a reasonable application should not try to catch errors, we mean that errors typically indicate severe problems that are outside the control of the application. For example:

Out of Memory Errors: If the application runs out of memory, it is often a sign that there is a fundamental issue with the way resources are managed, either in the application or in the environment. Attempting to catch such errors might not be meaningful because the application may not be in a stable state afterward.

Stack Overflow Errors: These indicate a serious flaw, often due to infinite recursion or excessive resource consumption, and catching them would not resolve the underlying issue.

In summary, a "reasonable application" is one that is designed to handle typical exceptions and maintain stability while providing a good user experience, but it recognizes that certain critical errors are beyond its capability to manage effectively.


##################################################################################################################################################################################




Whenever an error occurs while executing a statement, it creates an exception object and then the normal flow of the program halts and it tries to find someone that can handle the raised exception. 

The exception object contains a lot of debugging information such as method hierarchy, line number where the exception occurred, type of exception, etc. 

When the exception occurs in a method, the process of creating the exception object and handing it over to runtime environment is called *“throwing the exception”.

Exception handling refers to the anticipation, detection, and resolution of programming application, and communications errors. It is the block of code that processes the exception object and helps us by giving us a chance to act on it.

Why Exception Handling is Important
Think of a situation where you have got an exception and you want to print some custom message in your  logs, so that it can be understandable by the whole team.

There can be some situations where you want to just eat up the exception and want your test to carry on with rest of the execution.

In case you want to perform some series of steps on occurring of an certain exception for e.g. if you got an exception because a product is out of stock, that product is no longer displayed on the page and you want you to go with another product available on the page.

In case you want to handle some certain kind of exception in Selenium like ElementNotSelectableException, ElementNotVisibleException, NoSuchElementException etc. exceptions.

Different Exceptions in Selenium -----------------------------------------------------------------------------
There is a complete list of Exceptions mentioned on the Selenium Doc which you may or may not encounter in course of your  testing.

Most common Exceptions: ------------

1) NoSuchElementException : FindBy method can’t find the element.

2) StaleElementReferenceException : This tells that element is no longer appearing on the DOM page.

3) TimeoutException: This tells that the execution is failed because the command did not complete in enough time.

4) ElementNotVisibleException: Thrown to indicate that although an element is present on the DOM, it is not visible, and so is not able to be interacted with

5) ElementNotSelectableException: Thrown to indicate that may be the element is disabled, and so is not able to select.


How to Handle Exception--------------------------------------------------------------
Try/Catch: A method catches an exception using a combination of the try and catch keywords.
Try is the start of the block and Catch is at the end of try block to handle the exceptions. 
A try/catch block is placed around the code that might generate an exception. 
Code within a try/catch block is referred to as protected code,

syntax for using try/catch looks like the following: -----------------
try

	{

		// Some code

	}catch(Exception e){

		// Code for Handling the exception

	}


Multiple Catch blocks: --------------------------

A try block can be followed by multiple catch blocks.
there are multiple exceptions and you can expect more than one type of exception on a single code block and if you like to handle each type of exception separately with a separate block of code. 
The syntax for multiple catch blocks looks like the following:
try

	{

	   //Some code

	}catch(ExceptionType1 e1){

	   //Code for Handling the Exception 1

	}catch(ExceptionType2 e2){

	   //Code for Handling the Exception 2

	}

There is no restriction on the number of the catch blocks, you can use more than two. 

if an exception occurs in the protected code, the exception is thrown to the first catch block in the list. 
If the exception thrown matches the ExceptionType1, it gets caught there and it executes the code which is under the same exception block. 
If not, the exception passes down to the second catch statement and goes on like this.

Note: In case the exception does not match with any exception type and falls through all catches, the current method stops execution and exception is thrown.
That is why it is advisable to include default exception as well in the end, so in case if the exception falls through, it can be handled by the default one.


Throw: ---------------------------------------
Sometimes we want to generate exception explicitly in our code, 
for example in Selenium Automation Framework most of the time we print self-written logs, once we catch an exception and then we need to throw that exception back to the system so that the test case can be terminated. 
Throw keyword is used to throw exception to the runtime to handle it.

Throws: ----------------------------------------
When we are throwing any exception in a method and not handling it, 
then we need to use throws keyword in method signature to let caller program know the exceptions that might be thrown by the method.

// Method Signature\

public static void anyFunction() throws Exception{

    try{

		// write your code here    

	}catch (Exception e){

		// Do whatever you wish to do here

		// Now throw the exception back to the system

        throw(e);

        }

    }

Multiple Exceptions: We can provide multiple exceptions in the throws clause.
public static void anyFunction() throws ExceptionType1, ExceptionType2{

	try	{

		//Some code 

	}catch(ExceptionType1 e1){ 

		//Code for Handling the Exception 1

	}catch(ExceptionType2 e2){

		//Code for Handling the Exception 2

	}


Finally: ------------------------------------------------------
The finally keyword is used to create a block of code that follows a try block. 
A finally block of code always executes, whether an exception has occurred or not.

try

	{

	   //Protected code

	}catch(ExceptionType1 e1)

	{

	   //Catch block

	}catch(ExceptionType2 e2)

	{

	   //Catch block

	}catch(ExceptionType3 e3)

	{

	   //Catch block

	}finally

	{

	   //The finally block always executes.

	}


Exception Handling in Selenium ###################################################
Your Selenium test should be able to fail, but not because of exceptions that are thrown.
If your test is failing from exceptions then quite likely you have no exception handling. 
By doing this, you don't have the opportunity to cleanup the WebDriver object at the end of the test.
The tests should be failing under your terms only for example, you should never be getting exceptions like NullPointerException but if you are getting such as ElementNotFoundException, then also it is good idea to catch the exception, stop the further execution and end your test in a Logical way.

Example 1: I do not use any Page Object Factory but I use my own Page Object Pattern and I always print error logs and take screenshot on any exception I encounter. Please look at the code below:
public static WebElement btn_ReportCategory(WebDriver driver) throws Exception{

        try{

            WebElement element = driver.findElement(By.linkText("+ Report Categories"));

        }catch (Exception e){

			// Printing logs for my report

            Log.error("Report Category button element is not found.");

			// Taking screenshot for defect reporting

			Utils.captureScreenShot();

			// After doing my work, now i want to stop my test case

            throw(e);

        }

		// This will return the Element in case of no Exception

        return element;

    }

Example 2: TimeoutException using Selenium WebDriver.
try{

    myTestDriver.findElement(By.xpath("//*[@id='register']")).click();

}catch (TimeoutException toe) {

	wait.until( ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='register']")));

	myTestDriver.findElement(By.xpath("//*[@id='register']")).click();

}catch (Exception e) {

	Log.error("Register element is not found.");

	throw(e);

    }

}

Example 3: Let's assume that in Selenium WebDriver you want to verify the presence of any element on the page. You would not be able to get this with element locator because if the element is present, your locator will work and you will easily be able to print that the element is present but in case your element is not present on the page, your locator will fail and simply throw the exception. This case would be easily handled with the self-written function.
public static boolean verifyObjectPresent(WebDriver driver) {

	    try {

	    	driver.findElement(By.linkText("+ Report Categories"));

	    	return true;

	    } catch (Exception e) { 

	    	return false;

	    }

	}


Hierarchy of Java Exception classes ----------------

The java.lang.Throwable class is the root class of Java Exception hierarchy inherited by two subclasses: Exception and Error. The hierarchy of Java Exception classes is given below:

                                                                        Throwable

                                          Exception                                                                                    Error
                                                     
                                            IOException                                                                                   StackOverflowError
                                            SQLException                                                                                  VirtualMachineError
                                            ClassNotFoundException                                                                        OutOfMemoryError 
                                            RuntimeException
                                                    |
                                                    | ----  ArithmeticException
                                                            NUllPointerException
                                                            NumberFormatException
                                                            IndexOutOfBoundsException
                                                                      |
                                                                      |----  ArrayIndexOutOfBoundsException
                                                                             StringIndexOutOfBoundsException     
                                                       



Types of Java Exceptions -------------
In Java, exceptions are categorized into two main types: checked exceptions and unchecked exceptions.
Additionally, there is a third category known as errors. Let's delve into each of these types:

1. Checked Exception
2. Unchecked Exception
3. Error

1. Checked Exceptions  --- (COMPILE TIME EXCEPTION)
Checked exceptions are the exceptions that are checked at compile-time. This means that the compiler verifies that the code handles these exceptions either by catching them or declaring them in the method signature using the throws keyword. Examples of checked exceptions include:

IOException: An exception is thrown when an input/output operation fails, such as when reading from or writing to a file.

SQLException: It is thrown when an error occurs while accessing a database.

ParseException: Indicates a problem while parsing a string into another data type, such as parsing a date.

ClassNotFoundException: It is thrown when an application tries to load a class through its string name using methods like Class.forName(), but the class with the specified name cannot be found in the classpath.

2. Unchecked Exceptions --- (RUNTIME EXCEPTION)
Unchecked exceptions, also known as runtime exceptions, are not checked at compile-time. These exceptions usually occur due to programming errors, such as logic errors or incorrect assumptions in the code. They do not need to be declared in the method signature using the throws keyword, making it optional to handle them. Examples of unchecked exceptions include:

NullPointerException: It is thrown when trying to access or call a method on an object reference that is null.

ArrayIndexOutOfBoundsException: It occurs when we try to access an array element with an invalid index.

ArithmeticException: It is thrown when an arithmetic operation fails, such as division by zero.

IllegalArgumentException: It indicates that a method has been passed an illegal or inappropriate argument.



3. Errors
Errors represent exceptional conditions that are not expected to be caught under normal circumstances.
They are typically caused by issues outside the control of the application, such as system failures or resource exhaustion.
Errors are not meant to be caught or handled by application code. 

Examples of errors include:------------------------

OutOfMemoryError: It occurs when the Java Virtual Machine (JVM) cannot allocate enough memory for the application.

StackOverflowError: It is thrown when the stack memory is exhausted due to excessive recursion.

NoClassDefFoundError: It indicates that the JVM cannot find the definition of a class that was available at compile-time.

Understanding the different types of exceptions in Java is crucial for writing robust and reliable code.
By handling exceptions appropriately, you can improve the resilience of your applications and provide better user experiences.

Difference between Checked and Unchecked Exceptions----------------------------
Here are the key differences between checked exceptions, unchecked exceptions (runtime exceptions), and errors in Java:

1. Checked Exceptions: --------------------------
Compile-time Check: 
Checked exceptions are checked at compile-time by the Java compiler. 
This means that the compiler ensures that these exceptions are either caught or declared in the method signature using the throws keyword.

Examples: 
Examples of checked exceptions include IOException, SQLException, ParseException, etc.

Forced Handling: 
Checked exceptions enforce explicit handling, either by catching them or declaring them to be thrown. 
This helps in improving code reliability and robustness.

Recovery Possible: 
Checked exceptions typically represent recoverable conditions, such as file not found or database connection failure, where the application may take corrective action.

2. Unchecked Exceptions (Runtime Exceptions): ----------------------------------
Not Checked at Compile-time: 
Unlike checked exceptions, unchecked exceptions are not checked at compile-time. 
This means that the compiler does not enforce handling of unchecked exceptions.

Examples: 
Examples of unchecked exceptions include NullPointerException, ArrayIndexOutOfBoundsException, ArithmeticException, etc.

Runtime Errors: 
Unchecked exceptions often represent programming errors or unexpected conditions during runtime, such as null references or array index out of bounds.

Optional Handling: 
Handling of unchecked exceptions is optional. While it's good practice to handle them for robustness, it's not mandatory.

3. Errors:
Not Meant for Handling: 
Errors represent exceptional conditions that are typically beyond the control of the application and are not meant to be caught or handled by application code.

Examples:
Examples of errors include OutOfMemoryError, StackOverflowError, NoClassDefFoundError, etc.

Critical Conditions: 
Errors usually indicate critical conditions, such as JVM failures or system resource exhaustion, where the application cannot recover.

Java Exception Keywords --------------------------------------------
Java provides five keywords that are used to handle the exception. The following table describes each.

1. try
The "try" keyword is used to specify a block where we should place an exception code. 
It means we can't use try block alone. The try block must be followed by either catch or finally.

2. catch
The "catch" block is used to handle the exception.
It must be preceded by try block which means we can't use catch block alone. It can be followed by finally block later.

3. finally
The "finally" block is used to execute the necessary code of the program.
It is executed whether an exception is handled or not.

4. throw
The "throw" keyword is used to throw an exception to the environment.

5. throws
The "throws" keyword is used to declare exceptions. 
It specifies that there may occur an exception in the method.
It doesn't throw an exception.
It is always used with method signature.

The try-catch Block
The try block contains the code that may throw an exception, and the catch block is used to handle the exception if it occurs. 
Here's a basic example:
try {  
    // Code that may throw an exception  
} catch (ExceptionType e) {  
    // Exception handling code  
}  

Handling Multiple Exceptions -----------
You can handle multiple types of exceptions by providing multiple catch blocks, each catching a different type of exception.
This allows you to tailor your exception handling logic based on the specific type of exception thrown. Here's an example:

try {  
    // Code that may throw an exception  
} catch (IOException e) {  
    // Handle IOException  
} catch (NumberFormatException e) {  
    // Handle NumberFormatException  
} catch (Exception e) {  
    // Handle any other exceptions  
}  


The finally Block --------------
In addition to try and catch, Java also provides a finally block, which allows you to execute cleanup code, such as closing resources, regardless of whether an exception occurs or not. The finally block is typically used to release resources that were acquired in the try block.
Here's an example:
try {  
    // Code that may throw an exception  
} catch (Exception e) {  
    // Exception handling code  
} finally {  
    // Cleanup code  
}  

Common Scenarios of Java Exceptions #####################################################################################3
There are given some scenarios where unchecked exceptions may occur. They are as follows:

1) A scenario where ArithmeticException occurs
If we divide any number by zero, there occurs an ArithmeticException.
int a=50/0;//ArithmeticException  

public class ArithmeticExceptionExample {  
    public static void main(String[] args) {  
        int dividend = 10;  
        int divisor = 0;  
        try {  
            int result = dividend / divisor; // Division by zero  
            System.out.println("Result: " + result);  
        } catch (ArithmeticException e) {  
            System.out.println("Error: Division by zero is not allowed.");  
            // Additional error handling code can be added here  
        }  
    }  
}  


Output: Error: Division by zero is not allowed.

Explanation ----------

We have a main() method where we attempt to perform division by zero that is not allowed in arithmetic.

Inside the try block, we perform the division operation dividend / divisor, where divisor is assigned the value of 0.

When the division by zero occurs, an ArithmeticException is thrown. We catch this exception using a catch block specifically for ArithmeticException.

In the catch block, we handle the exception by printing an error message, indicating that division by zero is not allowed. Additional error handling logic can be added here if needed.


2) A scenario where NullPointerException occurs
If we have a null value in any variable, performing any operation on the variable throws a NullPointerException.
String s=null;  
System.out.println(s.length());//NullPointerException  


Here's a Java code example where a NullPointerException occurs:

File Name: NullPointerExceptionExample.java

public class NullPointerExceptionExample {  
    public static void main(String[] args) {  
        String str = null; // Initializing a String variable to null  
        try {  
            int length = str.length(); // Attempting to call a method on a null reference  
            System.out.println("Length of the string: " + length);  
        } catch (NullPointerException e) {  
            System.out.println("Error: Null reference encountered.");  
            // Additional error handling code can be added here  
        }  
    }  
}  

Output: Error: Null reference encountered.

Explanation

We have a main() method where we initialize a String variable str to null.

Inside the try block, we attempt to call the length() method on the str reference, which is null.

When attempting to call a method on a null reference, a NullPointerException is thrown.

We catch this exception using a catch block specifically for NullPointerException.

In the catch block, we handle the exception by printing an error message indicating that a null reference was encountered.
Additional error handling logic can be added here if needed.

3) A scenario where NumberFormatException occurs
If the formatting of any variable or number is mismatched, it may result into NumberFormatException. Suppose we have a string variable that has characters; converting this variable into digit will cause NumberFormatException.

String s="abc";  
int i=Integer.parseInt(s);//NumberFormatException  

Here's a Java code example where a NumberFormatException occurs:

File Name: NumberFormatExceptionExample.java

public class NumberFormatExceptionExample {  
    public static void main(String[] args) {  
        String str = "abc"; // Initializing a String with non-numeric characters  
        try {  
            int num = Integer.parseInt(str); // Attempting to parse a non-numeric string to an integer  
            System.out.println("Parsed number: " + num);  
        } catch (NumberFormatException e) {  
            System.out.println("Error: Unable to parse the string as an integer.");  
            // Additional error handling code can be added here  
        }  
    }  
}  

Output: Error: Unable to parse the string as an integer.


Explanation:

We have a main() method where we initialize a String variable str with non-numeric characters.

Inside the try block, we attempt to parse the string str to an integer using the Integer.parseInt() method.

Since the string contains non-numeric characters, the parsing operation throws a NumberFormatException.

We catch this exception using a catch block specifically for NumberFormatException.

In the catch block, we handle the exception by printing an error message indicating that the string could not be parsed as an integer. 
Additional error handling logic can be added here if needed.


4) A scenario where ArrayIndexOutOfBoundsException occurs
When an array exceeds to it's size, the ArrayIndexOutOfBoundsException occurs. there may be other reasons to occur ArrayIndexOutOfBoundsException. Consider the following statements.

int a[]=new int[5];  
a[10]=50; //ArrayIndexOutOfBoundsException  


Here's a Java code example where an ArrayIndexOutOfBoundsException occurs:
File Name: ArrayIndexOutOfBoundsExceptionExample.java

public class ArrayIndexOutOfBoundsExceptionExample {  
    public static void main(String[] args) {  
        int[] numbers = {1, 2, 3, 4, 5}; // Initializing an array with 5 elements  
        try {  
            int index = 10; // Accessing an index that is out of bounds  
            int value = numbers[index]; // Attempting to access an element at an invalid index  
            System.out.println("Value at index " + index + ": " + value);  
        } catch (ArrayIndexOutOfBoundsException e) {  
            System.out.println("Error: Index is out of bounds.");  
            // Additional error handling code can be added here  
        }  
    }  
}  

Output:  Error: Index is out of bounds.


Explanation

We have a main() method where we initialize an array numbers with 5 elements.

Inside the try block, we attempt to access an element at index 10, which is out of bounds for the array numbers.

Since the index is out of bounds, an ArrayIndexOutOfBoundsException is thrown.

We catch this exception using a catch block specifically for ArrayIndexOutOfBoundsException.

In the catch block, we handle the exception by printing an error message indicating that the index is out of bounds.
Additional error handling logic can be added here if needed.



Best Practices for Exception Handling ###############################################

Catch Specific Exceptions:
Catch specific exceptions whenever possible rather than catching general Exception objects.
It helps in providing more precise error handling and makes your code easier to understand and maintain.

Keep Exception Handling Simple: 
Avoid overly complex exception handling logic. Keep your catch blocks concise and focused on handling the specific exception they are designed for.
Complex exception handling logic can make your code difficult to debug and maintain.

Log Exceptions:
Always log exceptions or error messages when handling them. 
This helps in troubleshooting issues and diagnosing problems in production environments.

Throw Exceptions Appropriately: 
Throw exceptions when necessary, but avoid excessive use of checked exceptions. 
Checked exceptions should be used for exceptional conditions that the caller can reasonably be expected to handle.

Use Custom Exceptions: 
Create custom exception classes for specific error conditions in your application. This helps in providing meaningful error messages and makes your code more self-documenting.

Conclusion
Exception handling is an essential aspect of Java programming.
By following best practices and adopting effective exception handling strategies, you can write more robust and maintainable Java applications.
Remember to catch specific exceptions, keep exception handling simple, log exceptions for debugging purposes, throw exceptions appropriately, and use custom exceptions when needed. Mastering exception handling will help you build more reliable software that gracefully handles errors and exceptions.



################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Java try-catch block























